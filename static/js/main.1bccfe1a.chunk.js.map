{"version":3,"sources":["components/Card/Card.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Card","card","title","text","children","className","style","width","href","cardIds","img","reduce","acc","item","_id","shortid","generate","App","map","key","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6LAwBeA,G,MApBF,SAAC,GAAD,QAAGC,KAAQC,EAAX,EAAWA,MAAOC,EAAlB,EAAkBA,KAAQC,EAA1B,EAA0BA,SAA1B,OACT,yBAAKC,UAAU,OAAOC,MAAO,CAACC,MAAO,UAC/BH,EACF,yBAAKC,UAAU,aACX,wBAAIA,UAAU,cAAeH,GAC7B,uBAAGG,UAAU,aAAcF,GAC3B,uBAAGK,KAAK,IAAIH,UAAU,mBAAtB,oBCMNI,EAZQ,CACV,CACIP,MAAO,QACPC,KAAM,eAEV,CACID,MAAO,QACPC,KAAM,oBACNO,IAAK,wGAISC,QAAO,SAACC,EAAKC,GAC/B,MAAM,GAAN,mBAAWD,GAAX,cACIE,IAAKC,IAAQC,YACVH,OAER,IAqBYI,EAnBH,kBACR,yBAAKZ,UAAU,aAEPI,EAAQS,KAAI,YAA8B,IAA5BJ,EAA2B,EAA3BA,IAAKZ,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,KAAMO,EAAS,EAATA,IAC5B,OACI,kBAAC,EAAD,CACIS,IAAML,EACNb,KAAO,CAAEC,QAAOC,SAGhBO,EAAM,yBAAKU,IAAMV,EAAML,UAAU,eAAegB,IAAI,QAAW,WCrBnEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1bccfe1a.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Card.css';\r\n\r\nconst Card = ({ card: { title, text }, children }) => (\r\n    <div className=\"card\" style={{width: '18rem'}}>\r\n        { children }\r\n        <div className=\"card-body\">\r\n            <h5 className=\"card-title\">{ title }</h5>\r\n            <p className=\"card-text\">{ text }</p>\r\n            <a href=\"#\" className=\"btn btn-primary\">Go somewhere</a>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nCard.propTypes = {\r\n    props: PropTypes.shape({\r\n        card: PropTypes.shape({\r\n            title: PropTypes.string.isRequired,\r\n            text: PropTypes.string.isRequired\r\n        })\r\n    })\r\n};\r\n\r\nexport default Card;\r\n\r\n","import React from 'react';\r\nimport shortid from 'shortid';\r\nimport Card from './components/Card/Card';\r\n\r\nconst cards = [\r\n    {\r\n        title: 'Lorem',\r\n        text: 'Lorem ipsam'\r\n    },\r\n    {\r\n        title: 'Lorem',\r\n        text: 'Lorem ipsam dolor',\r\n        img: 'https://avatars.mds.yandex.net/get-pdb/404799/e98ba488-cffa-4b42-8ed2-d6eb0914c01d/s1200?webp=false'\r\n    }\r\n];\r\n\r\nconst cardIds = cards.reduce((acc, item) => {\r\n    return [...acc, {\r\n        _id: shortid.generate(),\r\n        ...item\r\n    }];\r\n}, []);\r\n\r\nconst App = () => (\r\n    <div className=\"container\">\r\n        {\r\n            cardIds.map(({_id, title, text, img}) => {\r\n                return (\r\n                    <Card\r\n                        key={ _id }\r\n                        card={ { title, text } }\r\n                    >\r\n                    {\r\n                        img ? <img src={ img } className=\"card-img-top\" alt=\"...\" /> : null\r\n                    }\r\n                    </Card>\r\n                );\r\n            })\r\n        }\r\n    </div>\r\n);\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}